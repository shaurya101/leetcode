/*
452. Minimum Number of Arrows to Burst Balloons

There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.
Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.
Given the array points, return the minimum number of arrows that must be shot to burst all balloons.

Example 1:
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: The balloons can be burst by 2 arrows:
- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].

Example 2:
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4
Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.

*/

============

class Solution {
    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a,b)->Integer.compare(a[1], b[1])); // NOTE
        int arrows = 1;
        int endPoint = points[0][1]; // end point of first balloon
        // checking from second balloon.
        for(int i = 1; i<points.length; i++) {
            // if start point <= end point, we will just move forward i++
            // if start point of (i+1)th node > end point of ith node, there will be no common arrows so we increment it and update our new endpoint
            if(points[i][0] > endPoint) {
                arrows++;
                endPoint = points[i][1];
            }
        }
        return arrows;
    }
}

// Approach
// Sort the array based on the increasing order of end points.
// We will consider the end point of first balloon and see how many start points lie within it. That way we can find all the balloons that the first array will burst.
// Then, when a start point will lie outside the end point we will increment the arrow count and repeat this process and find the balloons which second arrow will burst. And so on.
// We will have the number of arrows at the end.
